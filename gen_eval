#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess
import re
import xml.etree.ElementTree as ET
from xml.dom import minidom
from xmljson import badgerfish as bf
from json import dumps

def prettify(elem):
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent='  ')

def trim(ar):
    while ar.count('') > 0:
        ar.remove('')

    return ar

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Generate an evaluation result formatted as xml and json')

    parser.add_argument('--inputEvalFile', metavar='INPUT_EVAL_FILE', type=str,\
                        help='Input file name of evaluation, default "./eval.log"', \
                        default='./eval.log')
    parser.add_argument('--outputEvalDir', metavar='OUTPUT_EVAL_DIRECTORY', type=str,\
                        help='Path to directory to store output files, default "./"',
                        default='./')

    args = parser.parse_args()

    evalString = subprocess.check_output('cat %s' % args.inputEvalFile, shell=True)
    result = evalString.split('\n')

    rootNode = ET.Element('root')
    rootNodeForJson = ET.Element('root')

    index = 0

    while index < len(result):

        line = result[index]

        if line.startswith('category accuracies'):
            tagName = line.split(':')[0].replace(' ','_')
            catAccuracyNode = ET.SubElement(rootNode, tagName)
            catAccuracyNodeForJson = ET.SubElement(rootNodeForJson, tagName)
            while line.strip():
                if 'accuracy' in line:
                    items = re.split(' |:', line)
                    items = trim(items)
                    tagName = items[0]
                    ET.SubElement(catAccuracyNodeForJson, tagName).set(items[1], items[2].strip())
                    tagName = tagName + '_' + items[1]
                    ET.SubElement(catAccuracyNode, tagName).text = items[2].strip()
                index += 1
                line = result[index]
        elif line.startswith('dependency accuracies against CCGBank dependency'):
            tagName = line.split(':')[0].replace(' ','_')
            depAccuracyNode = ET.SubElement(rootNode, tagName)
            depAccuracyNodeForJson = ET.SubElement(rootNodeForJson, tagName)
            while line.strip():
                if line.startswith('bunsetsu accuracy') or \
                    line.startswith('sentence accuracy'):
                    items = re.split(':|\<|\>', line)
                    items = trim(items)
                    tagName = items[0].strip().replace(' ','_')
                    ET.SubElement(depAccuracyNode, tagName).text = items[1].strip()
                    ET.SubElement(depAccuracyNodeForJson, tagName).set('accuracy', items[1].strip())
                index += 1
                line = result[index]

        index += 1

    outxml = open(args.outputEvalDir + '/eval.xml', 'w')
    outxml.write(prettify(rootNode))
    outxml.close()

    json = bf.data(rootNodeForJson)

    outjson = open(args.outputEvalDir + '/eval.json', 'w')
    outjson.write(dumps(json, sort_keys=True, indent=2))
    outjson.close()
